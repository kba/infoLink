import org.gradle.api.tasks.application.CreateStartScripts

apply plugin: 'application'
apply plugin: 'java'

version =  1.0
sourceCompatibility = 1.5

repositories {
    mavenCentral()
}

dependencies {
    compile 'nz.ac.waikato.cms.weka:weka-stable:3.6.6'
    compile 'org.apache.lucene:lucene-core:3.5.0'
    compile 'org.apache.lucene:lucene-queryparser:3.5.0'
    // compile 'org.apache.lucene:lucene-analyzers-common:3.5.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.pdfbox:pdfbox:1.8.8'
    compile 'args4j:args4j:2.0.29'
    compile 'org.jsoup:jsoup:1.8.1'
}

task copyPython(type:Copy) {
    def source = 'src/main/python'
    def target = new File(project.buildDir, 'bin')
    from source
    into target
}
applicationDistribution.from(copyPython) {
    into "bin"
}

// http://stackoverflow.com/questions/18421857/is-it-possible-to-specify-multiple-main-classes-using-gradle-application-plugi
// The next two lines disable the tasks for the primary main which by default
// generates a script with a name matching the project name. 
// You can leave them enabled but if so you'll need to define mainClassName
// And you'll be creating your application scripts two different ways which 
// could lead to confusion
startScripts.enabled = false
run.enabled = false
// Creates scripts for entry points
// Subproject must apply application plugin to be able to call this method.
def createScript(mainClass, scriptName) {

  def taskName = "Install_Script_For_" + scriptName

  project.tasks.create(name: taskName, type: CreateStartScripts) {
    outputDir       = new File(project.buildDir, 'scripts')
    mainClassName   = mainClass
    applicationName = scriptName
    classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
  }

  project.tasks[taskName].dependsOn(project.jar)

  project.applicationDistribution.with {
    into("bin") {
      from(project.tasks[taskName])
      fileMode = 0755
    }
  }
}
createScript('tagger.Tagger', 'Tagger')
createScript('preprocessing.TextExtractor', 'TextExtractor')
createScript('preprocessing.Cleaner', 'Cleaner')
createScript('luceneIndexing.Indexer', 'Indexer')
createScript('searching.Search_Term_Position', 'Search_Term_Position')
createScript('patternLearner.TrainingSet', 'TrainingSet')
createScript('patternLearner.Learner', 'Learner')
createScript('patternLearner.ExampleReader', 'ExampleReader')
createScript('patternLearner.ContextMiner', 'ContextMiner')
createScript('patternLearner.StudyMatcher', 'StudyMatcher')

// vim: ft=groovy:
